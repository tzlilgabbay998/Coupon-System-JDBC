package coupon.system.core.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import coupon.system.core.beans.Category;
import coupon.system.core.beans.Coupon;
import coupon.system.core.db.ConnectionPool;
import coupon.system.core.exceptions.CouponSystemException;

public class CouponDBDAO implements CouponDAO {

	@Override
	public void addCoupon(Coupon coupon) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "insert into coupon values(0, ?, ?, ?, ?, ?, ?, ?, ?, ?) ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);) {
			pstmt.setInt(1, coupon.getCompanyID());
			pstmt.setInt(2, coupon.getCategory().ordinal());
			pstmt.setString(3, coupon.getTitle());
			pstmt.setString(4, coupon.getDescription());
			pstmt.setDate(5, Date.valueOf(coupon.getStartDate()));
			pstmt.setDate(6, Date.valueOf(coupon.getEndDate()));
			pstmt.setInt(7, coupon.getAmount());
			pstmt.setDouble(8, coupon.getPrice());
			pstmt.setString(9, coupon.getImage());
			pstmt.executeUpdate();
			ResultSet rs = pstmt.getGeneratedKeys();
			rs.next();
			int autoGeneratedId = rs.getInt(1);
			coupon.setCouponID(autoGeneratedId);
		} catch (SQLException e) {
			throw new CouponSystemException("the method 'add-Coupon' has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public Coupon updateCoupon(Coupon coupon) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "update coupon set company_id= ? , category_id= ? , title= ? , description= ? , start_date= ? , end_date= ? , amount= ? , price= ? , image= ?  where id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, coupon.getCompanyID());
			pstmt.setInt(2, coupon.getCategory().ordinal());
			pstmt.setString(3, coupon.getTitle());
			pstmt.setString(4, coupon.getDescription());
			pstmt.setDate(5, Date.valueOf(coupon.getStartDate()));
			pstmt.setDate(6, Date.valueOf(coupon.getEndDate()));
			pstmt.setInt(7, coupon.getAmount());
			pstmt.setDouble(8, coupon.getPrice());
			pstmt.setString(9, coupon.getImage());
			pstmt.setInt(10, coupon.getCouponID());
			pstmt.executeUpdate();
			return coupon;
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t update coupon", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public String deleteCoupon(int couponID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from coupon where id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, couponID);
			pstmt.executeUpdate();
			return "Coupon" + couponID + "has deleted";
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t delete coupon", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public Coupon getOneCoupon(int couponID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, couponID);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				Coupon coupon = new Coupon(couponID);
				coupon.setCouponID(couponID);
				coupon.setCompanyID(rs.getInt("company_id"));
				coupon.setCategory(Category.values()[rs.getInt("category_id")]);
				coupon.setTitle(rs.getString("title"));
				coupon.setDescription(rs.getString("description"));
				coupon.setStartDate(LocalDate.parse(rs.getDate("start_date").toString()));
				coupon.setEndDate(LocalDate.parse(rs.getDate("end_date").toString()));
				coupon.setAmount(rs.getInt("amount"));
				coupon.setPrice(rs.getDouble("price"));
				coupon.setImage(rs.getString("image"));
				return coupon;
			} else {
				throw new CouponSystemException("getOneCoupon failed - could'nt found coupon id " + couponID);
			}
		} catch (SQLException e) {
			throw new CouponSystemException("getOneCoupon failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public List<Integer> getCouponID(int companyID) throws CouponSystemException {
		List<Integer> couponsID = new ArrayList<>();
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id=? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int couponID = rs.getInt("coupon_id");
				couponsID.add(couponID);
			}
			System.out.println(couponsID);
			return couponsID;
		} catch (Exception e) {
			throw new CouponSystemException("get All coupons failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void addCouponPurchase(int customerID, int couponID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "insert into customer_vs_coupon values(?,?) ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, customerID);
			pstmt.setInt(2, couponID);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new CouponSystemException("getOneCoupon failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void deleteCouponPurchase(int couponID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from customer_vs_coupon where coupon_id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, couponID);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new CouponSystemException("getOneCoupon failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public List<Coupon> getAllCoupons() throws CouponSystemException {
		List<Coupon> coupons = new ArrayList<>();
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			ResultSet rs = pstmt.executeQuery();
			Coupon coupon = new Coupon();
			int i = 0;
			while (rs.next()) {
				int couponID = rs.getInt("coupon_id");
				int companyID = rs.getInt("company_id");
				Category category = (Category.values()[rs.getInt("category")]);
				String titel = rs.getString("Title");
				String description = rs.getString("description");
				LocalDate startDate = (LocalDate.parse(rs.getDate("start_date").toString()));
				LocalDate endDate = (LocalDate.parse(rs.getDate("end_date").toString()));
				int amount = rs.getInt("amount");
				double price = rs.getDouble("price");
				String image = rs.getString("image");
				coupons.add(i++, coupon);
			}
			return coupons;
		} catch (Exception e) {
			throw new CouponSystemException("get All coupons failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public boolean isCouponExist(String title, int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where title= ? and company_id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, title);
			pstmt.setInt(2, companyID);
			pstmt.executeQuery();
			ResultSet rs = pstmt.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			throw new CouponSystemException("Coupon search has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

}
