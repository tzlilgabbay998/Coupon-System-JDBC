package coupon.system.core.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import coupon.system.core.beans.Category;
import coupon.system.core.beans.Company;
import coupon.system.core.beans.Coupon;
import coupon.system.core.db.ConnectionPool;
import coupon.system.core.exceptions.CouponSystemException;

public class CompanyDBDAO implements CompanyDAO {

	@Override
	public boolean isCompanyExist(String email, String password) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where email= ? and password= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, email);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			throw new CouponSystemException("Company search has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public boolean isCompanyExist(int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where id=? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			ResultSet rs = pstmt.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t search company", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public boolean doesCompanyExist(String email, String name) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where email=? and name=? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, email);
			pstmt.setString(2, name);
			ResultSet rs = pstmt.executeQuery();
			return rs.next();
		} catch (SQLException e) {
			throw new CouponSystemException("Search of company has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void addCompany(Company company) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "insert into company values(0,?,?,?) ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);) {
			pstmt.setString(1, company.getName());
			pstmt.setString(2, company.getEmail());
			pstmt.setString(3, company.getPassword());
			pstmt.executeUpdate();
			ResultSet rs = pstmt.getGeneratedKeys();
			rs.next();
			int autoGeneratedId = rs.getInt(1);
			company.setCompanyID(autoGeneratedId);
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t add company", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public Company UpdateCompany(Company company) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "update company set email= ? , password= ? where id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, company.getEmail());
			pstmt.setString(2, company.getPassword());
			pstmt.setInt(3, company.getCompanyID());
			pstmt.executeUpdate();
			return company;
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t update company", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void deleteCompany(int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from company where id=? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			pstmt.executeUpdate();

		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t find company to delete. maybe not exist", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public List<Company> getAllCompanies() throws CouponSystemException {
		List<Company> getAllCompanies = new ArrayList<>();
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int id = rs.getInt("id");
				String name = rs.getString("name");
				String email = rs.getString("email");
				String password = rs.getString("password");
				Company compnany = new Company(id, name, email, password);
				getAllCompanies.add(compnany);
			}
			return getAllCompanies;
		} catch (Exception e) {
			throw new CouponSystemException("get All Companies failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public List<Coupon> getCompanyCoupons(int companyID) throws CouponSystemException {
		List<Coupon> coupons = new ArrayList<>();
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int couponID = rs.getInt("id");
				Category category = (Category.values()[rs.getInt("category_id")]);
				String title = rs.getString("title");
				String description = rs.getString("description");
				LocalDate startDate = (LocalDate.parse(rs.getDate("start_date").toString()));
				LocalDate endDate = (LocalDate.parse(rs.getDate("end_date").toString()));
				int amount = rs.getInt("amount");
				double price = rs.getDouble("price");
				String image = rs.getString("image");
				Coupon coupon = new Coupon(companyID, couponID, category, title, description, startDate, endDate,
						amount, price, image);
				coupons.add(coupon);
			}
			return coupons;
		} catch (Exception e) {
			throw new CouponSystemException("get All coupons of your company has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public List<Coupon> getCompanyCouponsByCategory(int companyID, Category category) throws CouponSystemException {
		List<Coupon> categoryCoupons = new ArrayList<>();
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id= ? and category_id = ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			pstmt.setInt(2, category.ordinal());
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int couponID = rs.getInt("id");
				String title = rs.getString("title");
				String description = rs.getString("description");
				LocalDate startDate = (LocalDate.parse(rs.getDate("start_date").toString()));
				LocalDate endDate = (LocalDate.parse(rs.getDate("end_date").toString()));
				int amount = rs.getInt("amount");
				double price = rs.getDouble("price");
				String image = rs.getString("image");
				Coupon coupon = new Coupon(couponID, companyID, category, title, description, startDate, endDate,
						amount, price, image);
				categoryCoupons.add(coupon);
			}
			return categoryCoupons;
		} catch (Exception e) {
			throw new CouponSystemException("get All coupons of your company by category, has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public List<Coupon> getCompanyCouponsByMaxPrice(int companyID, double maxPrice) throws CouponSystemException {
		List<Coupon> coupons = new ArrayList<>();
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id= ? and price <= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			pstmt.setDouble(2, maxPrice);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				int couponID = rs.getInt("id");
				Category category = (Category.values()[rs.getInt("category_id")]);
				String title = rs.getString("title");
				String description = rs.getString("description");
				LocalDate startDate = (LocalDate.parse(rs.getDate("start_date").toString()));
				LocalDate endDate = (LocalDate.parse(rs.getDate("end_date").toString()));
				int amount = rs.getInt("amount");
				double price = rs.getDouble("Price");
				String image = rs.getString("image");
				Coupon coupon = new Coupon(couponID, companyID, category, title, description, startDate, endDate,
						amount, price, image);
				coupons.add(coupon);
			}
			return coupons;
		} catch (Exception e) {
			throw new CouponSystemException("get All coupons by this price, has failed", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public Company getOneCompany(int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where id=? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			Company company = new Company();
			company.setCompanyID(companyID);
			company.setName(rs.getString("Name"));
			company.setEmail(rs.getString("Email"));
			company.setPassword(rs.getString("Password"));
			return company;
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t find company", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void deleteAllCompanyCoupons(int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from coupon where company_id= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t delete company's coupons", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public void deleteCompanyCouponsHistory(int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from customer_vs_coupon where coupon_id in(select id from coupon where company_id= ?); ";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t delete company's coupons history of purchase", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int getCompanyID(String email) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select id from company where email= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);) {
			pstmt.setString(1, email);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			return rs.getInt(1);
		} catch (SQLException e) {
			throw new CouponSystemException("couldn`t find company", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

}
